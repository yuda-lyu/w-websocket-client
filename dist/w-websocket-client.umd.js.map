{"version":3,"file":"w-websocket-client.umd.js","sources":["../node_modules/wsemi/src/isfun.mjs","../src/WWebsocketClient.mjs","../node_modules/wsemi/src/getEnv.mjs","../node_modules/wsemi/src/getGlobal.mjs"],"sourcesContent":["/**\r\n * 判斷是否為函數\r\n *\r\n * Unit Test: {@link https://github.com/yuda-lyu/wsemi/blob/master/test/isfun.test.js Github}\r\n * @memberOf wsemi\r\n * @param {*} v 輸入任意資料\r\n * @returns {Boolean} 回傳判斷布林值\r\n * @example\r\n * isfun('1.25')\r\n * // => false\r\n *\r\n * isfun(function() {})\r\n * // => true\r\n */\r\nfunction isfun(v) {\r\n\r\n    let c = Object.prototype.toString.call(v)\r\n    return c === '[object Function]' || c === '[object AsyncFunction]'\r\n}\r\n\r\n\r\nexport default isfun\r\n","import WS from 'ws'\r\nimport getGlobal from 'wsemi/src/getGlobal.mjs'\r\nimport getEnv from 'wsemi/src/getEnv.mjs'\r\nimport isfun from 'wsemi/src/isfun.mjs'\r\n\r\n\r\n/**\r\n * 建立WebSocket使用者(Node.js與Browser)端物件\r\n *\r\n * @param {Object} opt 輸入設定參數物件\r\n * @param {String} [opt.url='ws://localhost:8080'] 輸入WebSocket伺服器ws網址，預設為'ws://localhost:8080'\r\n * @param {String} [opt.token='*'] 輸入使用者認證用token，預設為'*'\r\n * @param {Function} opt.open 輸入監聽open函數\r\n * @param {Function} opt.close 輸入監聽close函數\r\n * @param {Function} opt.message 輸入監聽message函數\r\n * @param {Function} opt.error 輸入監聽error函數\r\n * @returns {Promise} 回傳Promise，resolve為回傳連接成功的Websocket物件，reject回傳為無法連接\r\n * @example\r\n *\r\n * import WSC from 'w-websocket-client/dist/w-websocket-client.umd.js'\r\n *\r\n * //opt\r\n * let opt = {\r\n *     url: 'ws://localhost:8080',\r\n *     token: '*',\r\n *     open: function() {\r\n *         console.log('client: open')\r\n *     },\r\n *     close: function() {\r\n *         console.log('client: close')\r\n *     },\r\n *     message: function(data) {\r\n *         console.log('client: message', data)\r\n *     },\r\n *     error: function(err) {\r\n *         console.log('client: error:', err)\r\n *     },\r\n * }\r\n *\r\n * //wsc\r\n * let wsc = null\r\n * new WSC(opt)\r\n *     .then(function(w){\r\n *\r\n *         //save\r\n *         wsc = w\r\n *\r\n *         //send\r\n *         let data = 'abc'\r\n *         wsc.send(data)\r\n *\r\n *     })\r\n *\r\n *\r\n */\r\nfunction WWebsocketClient(opt) {\r\n    let wsc = null //WebSocket\r\n\r\n\r\n    //default\r\n    if (!opt.url) {\r\n        opt.url = 'ws://localhost:8080'\r\n    }\r\n    if (!opt.token) {\r\n        opt.token = '*'\r\n    }\r\n\r\n\r\n    //isBrowser\r\n    let isBrowser = getEnv().isBrowser\r\n\r\n\r\n    //MixWS\r\n    let MixWS\r\n    if (isBrowser) {\r\n        //於browser時, 不能直接使用window, 因可能會於worker內會沒有window可用, 故得通過getGlobal取得當前頂層物件\r\n        MixWS = getGlobal().WebSocket //use browser websocket\r\n    }\r\n    else {\r\n        //若不是browser則假設為在nodejs, 故改使用ws連線\r\n        MixWS = WS //use nodejs ws\r\n    }\r\n\r\n\r\n    //WebSocket, 網址傳token參數作為識別使用者\r\n    try {\r\n        wsc = new MixWS(opt.url + '/' + '?token=' + opt.token)\r\n    }\r\n    catch (err) {\r\n        //throw (new Error('can not new MixWS'))\r\n        wsc = null\r\n    }\r\n\r\n\r\n    //check, 可能因ie11安全性考量而被封鎖\r\n    if (wsc === null) {\r\n        return {\r\n            error: 'can not new MixWS'\r\n        }\r\n    }\r\n\r\n\r\n    //bind\r\n    if (isBrowser) {\r\n        wsc.onopen = fOpen\r\n        wsc.onmessage = function(ev) {\r\n            let message = ev.data //瀏覽器端會被包至data\r\n            fMessage(message)\r\n        }\r\n        wsc.onclose = fClose\r\n        wsc.onerror = fError\r\n    }\r\n    else {\r\n        wsc.on('open', fOpen)\r\n        wsc.on('message', fMessage)\r\n        wsc.on('close', fClose)\r\n        wsc.on('error', fError)\r\n    }\r\n\r\n\r\n    //fOpen\r\n    function fOpen() {\r\n        if (isfun(opt.open)) {\r\n            opt.open()\r\n        }\r\n    }\r\n\r\n\r\n    //fClose\r\n    function fClose() {\r\n        if (isfun(opt.close)) {\r\n            opt.close()\r\n        }\r\n    }\r\n\r\n\r\n    //fMessage\r\n    function fMessage(data) {\r\n        if (isfun(opt.message)) {\r\n            opt.message(data)\r\n        }\r\n    }\r\n\r\n\r\n    //fError\r\n    function fError(err) {\r\n        if (isfun(opt.error)) {\r\n            opt.error(err)\r\n        }\r\n        wsc.close()\r\n    }\r\n\r\n\r\n    return wsc\r\n}\r\n\r\n\r\nexport default WWebsocketClient\r\n","/**\r\n * 取得運行環境\r\n *\r\n * Unit Test: {@link https://github.com/yuda-lyu/wsemi/blob/master/test/getEnv.test.js Github}\r\n * @memberOf wsemi\r\n * @returns {Object} 回傳運行環境物件\r\n * @example\r\n * getEnv()\r\n * // => { isBrowser: false, isWebWorker: false, isNode: true }\r\n */\r\nfunction getEnv() {\r\n\r\n    //isBrowser\r\n    let isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined'\r\n\r\n    //isWebWorker\r\n    //let isWebWorker = typeof self === 'object' && self.constructor && self.constructor.name === 'DedicatedWorkerGlobalScope' //於ie11的webworker內失效\r\n    let isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope\r\n\r\n    //isNode\r\n    let isNode = typeof process !== 'undefined' &&\r\n        process.versions != null &&\r\n        process.versions.node != null\r\n\r\n    //若在WebWorker也代表在瀏覽器\r\n    isBrowser = isBrowser || isWebWorker\r\n\r\n    //此處沒偵測nodejs的Worker Threads\r\n\r\n    let r = {\r\n        isBrowser,\r\n        isWebWorker,\r\n        isNode\r\n    }\r\n\r\n    return r\r\n}\r\n\r\n\r\nexport default getEnv\r\n","/**\r\n * 取得運行環境中的頂層物件\r\n *\r\n * Unit Test: {@link https://github.com/yuda-lyu/wsemi/blob/master/test/getGlobal.test.js Github}\r\n * @memberOf wsemi\r\n * @returns {Object} 回傳頂層物件，若無法取得則回傳null\r\n * @example\r\n * getGlobal()\r\n * // => global object in running environment\r\n */\r\nfunction getGlobal() {\r\n\r\n    if (typeof self !== 'undefined') {\r\n        return self\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window //於borwser的型別為[object Window]\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global //於nodejs的型別為[object global]\r\n    }\r\n\r\n    return null\r\n}\r\n\r\n\r\nexport default getGlobal\r\n"],"names":["isfun","v","c","Object","prototype","toString","call","opt","wsc","url","token","MixWS","isBrowser","window","document","isWebWorker","WorkerGlobalScope","self","isNode","process","versions","node","getEnv","global","WebSocket","WS","err","error","fOpen","open","fClose","close","fMessage","data","message","fError","onopen","onmessage","ev","onclose","onerror","on"],"mappings":";;;;;qOAcA,SAASA,EAAMC,OAEPC,EAAIC,OAAOC,UAAUC,SAASC,KAAKL,SAC1B,sBAANC,GAAmC,2BAANA,sDCsCxC,SAA0BK,OAClBC,EAAM,KAILD,EAAIE,MACLF,EAAIE,IAAM,uBAETF,EAAIG,QACLH,EAAIG,MAAQ,SASZC,EAJAC,EC3DR,eAGQA,EAA8B,oBAAXC,aAAqD,IAApBA,OAAOC,SAI3DC,EAA2C,oBAAtBC,mBAAqCC,gBAAgBD,wBAYtE,CACJJ,UALJA,EAAYA,GAAaG,EAMrBA,YAAAA,EACAG,OAZ4B,oBAAZC,SACI,MAApBA,QAAQC,UACiB,MAAzBD,QAAQC,SAASC,MD+CLC,GAASV,UAOrBD,EAFAC,GE9DgB,oBAATK,KACAA,KAEW,oBAAXJ,OACAA,OAEW,oBAAXU,OACAA,OAGJ,MFsDiBC,UAIZC,MAMRjB,EAAM,IAAIG,EAAMJ,EAAIE,IAAM,WAAkBF,EAAIG,OAEpD,MAAOgB,GAEHlB,EAAM,QAKE,OAARA,QACO,CACHmB,MAAO,8BAwBNC,IACD5B,EAAMO,EAAIsB,OACVtB,EAAIsB,gBAMHC,IACD9B,EAAMO,EAAIwB,QACVxB,EAAIwB,iBAMHC,EAASC,GACVjC,EAAMO,EAAI2B,UACV3B,EAAI2B,QAAQD,YAMXE,EAAOT,GACR1B,EAAMO,EAAIoB,QACVpB,EAAIoB,MAAMD,GAEdlB,EAAIuB,eA9CJnB,GACAJ,EAAI4B,OAASR,EACbpB,EAAI6B,UAAY,SAASC,GAErBN,EADcM,EAAGL,OAGrBzB,EAAI+B,QAAUT,EACdtB,EAAIgC,QAAUL,IAGd3B,EAAIiC,GAAG,OAAQb,GACfpB,EAAIiC,GAAG,UAAWT,GAClBxB,EAAIiC,GAAG,QAASX,GAChBtB,EAAIiC,GAAG,QAASN,IAqCb3B"}